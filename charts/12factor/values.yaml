# Default values for 12factor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Override the name of the chart.
nameOverride: ""
# -- Override the name of the release.
fullnameOverride: ""

image:
  # -- Where the application container can be found.
  repository: "nginx"
  # -- What version of the application should be run.
  tag: ""
  # -- How the container should be pulled.
  pullPolicy: IfNotPresent

# -- Provide credentials to private registries without the fuss of kubectl or generating a docker config.
imagePullSecrets: []
#  - registry: "ghcr.io"
#    username: ""
#    password: ""

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname
  #    template.
  name: ""

# -- Hooks provide tie-ins to the release lifecycle. They're particularly useful for running database migration and
#    backup jobs.
hooks: []
  # - name: ""
  #   triggers: [pre-install,pre-upgrade]
  #   weight: 0
  #   resourcePolicy: keep
  #   deletionPolicy: [before-hook-creation,hook-succeeded]
  #   securityContext: {}
  #   image:
  #     repository: ""
  #     tag: ""
  #     pullPolicy: IfNotPresent
  #   env: []
  #   envFrom: []
  #   command: []
  #   args: []
  #   resources: {}

deployment:
  # -- The number of pods to deploy.
  replicaCount: 1

  autoscaling:
    # -- Enable autoscaling for this deployment.
    #    [[documentation](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)]
    enabled: false
    # -- The minimum number of replicas to deploy.
    minReplicas: 1
    # -- The maximum number of replicas to deploy.
    maxReplicas: 100
    # -- Autoscale using CPU utilization as an indicator.
    targetCPUUtilizationPercentage:
    # -- Autoscale using memory as an indicator.
    targetMemoryUtilizationPercentage:
    # -- Autoscale using custom metrics. This allows the deployment to autoscale based on metrics related to Kubernetes
    #    resources as well as metrics that have nothing to do with kubernetes. For more information, see the docs.
    #    [[documentation](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-metrics-not-related-to-kubernetes-objects)]
    metrics: []
      # - type: Object
      #   object:
      #     target:
      #       kind: Service
      #       name: metrics-exporter
      #     metricName: seconds
      #     targetValue: 100
      #
      # - type: External
      #   external:
      #     metric:
      #       name: queue_messages_ready
      #       selector:
      #         matchLabels:
      #           queue: "worker_tasks"
      #     target:
      #       type: AverageValue
      #       averageValue: 30

  # -- Annotations are added to pods within the deployment.
  annotations: {}

  # -- Specify additional secret names containing registry credentials that should be added to this deployment.
  imagePullSecrets: []

  # -- Specify volumes that should be included with the deployment.
  volumes: []

  application:
    # -- Specify the security context to assign to the application container.
    securityContext: {}

    # -- (object/list) Environment variables provided to the application.
    env:

    # -- Load additional environment variables from secrets or config maps.
    envFrom: []

    # -- Mount configuration files into the container.
    volumeMounts: []

    # -- Specify the entrypoint command for the container.
    command: []

    # -- Specify arguments that should be passed to the entrypoint.
    args: []

    # -- Expose ports on the container.
    ports: []
      # - name: http
      #   containerPort: 8080

    checks:
      # -- Used to indicate that the container has started successfully. If specified, no other checks are run until this
      #    completes successfully.
      #    [[documentation](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#probe-check-methods)]
      startup: {}
        # exec: {}
        # grpc: {}
        # httpGet: {}
        # tcpSocket: {}

      # -- Periodically checks if the container is alive and running. The container will be restarted if this check fails.
      #    [[documentation](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#probe-check-methods)]
      liveness: {}
        # exec: {}
        # grpc: {}
        # httpGet: {}
        # tcpSocket: {}

      # -- Periodically check if the container for service readiness. This container will be removed from service
      #    endpoints if this check fails.
      #    [[documentation](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#probe-check-methods)]
      readiness: {}
        # exec: {}
        # grpc: {}
        # httpGet: {}
        # tcpSocket: {}

    # -- The resources to request for this container.
    resources: {}

  # sidecars (metrics)
  sidecars: []
    # - name: ""
    #   securityContext: {}
    #   image:
    #     repository: ""
    #     tag: ""
    #     pullPolicy: IfNotPresent
    #   env: []
    #   envFrom: []
    #   volumeMounts: []
    #   command: []
    #   args: []
    #   ports: []
    #   checks:
    #     startup: {}
    #     liveness: {}
    #     readiness: {}
    #   resources: {}

  # -- Enumerate tasks that the application needs to perform. These are defined using CronJobs and use the same image
  #    as the application in the deployment configuration block.
  tasks: []
    # - name: ""
    #   schedule: ""
    #   suspend: false
    #   securityContext: {}
    #   image:
    #     repository: ""
    #     tag: ""
    #     pullPolicy: IfNotPresent
    #   env: []
    #   envFrom: []
    #   volumeMounts: []
    #   command: []
    #   args: []
    #   resources: {}

  # -- Deploy this application to a specific set of nodes. Useful for selecting nodes with specific hardware
  #    characteristics (like GPU support).
  nodeSelector: {}

  # -- Configure taints that this deployment is willing to tolerate. Useful for running on a dedicated pool of nodes.
  tolerations: []

  # -- Specify affinity and anti-affinity rules for this deployment. Useful for placing two deployments on the same
  #    set of nodes or spreading them across different zones and regions.
  affinity: {}

  # -- Specify how pods should be spread across your infrastructure. This is typically done across hostnames to provide
  #    machine level redundancy and availability zones to provide higher availability in production systems.
  topologySpreadConstraints: []
#    - topologyKey: topology.kubernetes.io/zone
#      whenUnsatisfiable: ScheduleAnyway
#      maxSkew: 1

networking:
  service:
    # -- Additional annotations to include on the service.
    annotations: {}

    # -- The kind of service that should be used to expose this application.
    type: ClusterIP

    # -- Explicitly claim an IP address or specify None for a headless service.
    clusterIP: ""

    # -- Enumerate the ports on the application to expose. These should be well-known ports. If none are provided,
    #    no service will be created.
    ports: []
      # - name: http
      #   port: 80
      #   targetPort: http

  ingress:
    # -- Enable ingress addressing. In order for ingress addressing to work, there must be an `http` port exposed on the
    #    service in order for ingress to work. This can be configured on a per host-path definition or using the
    #    `portName` value.
    enabled: false

    # -- The name of the ingress class to use (if not set via an annotation).
    className: ""

    # -- Additional annotations to add to the Ingress definition.
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    # -- The name of the service port we're attempting to expose.
    portName: http

    hosts:
      - # -- The host the ingress should route to this deployment.
        host: chart-example.local
        paths:
          - # -- The path to match on.
            path: /
            # -- Configure the behavior of the ingress route. This defaults to ImplementationSpecific for backwards
            #    compatibility.
            pathType: ImplementationSpecific
            # -- Override the service port this path routes to. If not configured, the default portName is used.
            portName: ""

    # -- Configure TLS certificates for the ingress to use.
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

metrics:
  # -- Whether metrics collection should be enabled. If this is enabled, then the application should expose a metrics
  #    endpoint (port and path) for data collection. `portName` can be used to configure the name of the port used to
  #    collect metrics.
  enabled: false

  endpoints:
    - # -- The name of the container port hosting the metrics endpoint.
      portName: metrics

      # -- Extra configuration to supply the podMetricsEndpoint entry. To get an idea of what additional configuration may
      #    be specified, see `kubectl explain podmonitor.spec.podMetricsEndpoints`.
      podMonitor: {}
